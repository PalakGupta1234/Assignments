1/. 

Assignment1SpringSecuirityApplication.java

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Assignment1SpringSecuirityApplication {

	public static void main(String[] args) {
		SpringApplication.run(Assignment1SpringSecuirityApplication.class, args);
	}

}

HomeResource.java

package com.example.demo;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeResource 
{
	@GetMapping
	public String home()
	{
		return (" <h1> Hello World </h1>");
	}

}


2/-

Assignment2SpringSecuirityApplication.java

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Assignment2SpringSecuirityApplication {

	public static void main(String[] args) {
		SpringApplication.run(Assignment2SpringSecuirityApplication.class, args);
	}

}

 LoginController.java

package com.example.demo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class LoginController
{
	@GetMapping("/login")
	public String login()
	{
		return "login";
	}

}

SecuirityConfig.java

package com.example.demo;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@EnableWebSecurity
public class SecuirityConfig extends WebSecurityConfigurerAdapter
{
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http
		.authorizeRequests()
		.anyRequest().authenticated()
		.and()
		.formLogin()
		.loginPage("/login")
		.permitAll();
     
}
}

login.html

<html xmlns:th="https://www.thymeleaf.org">
<head>
<title> Please Login</title>
</head>
<body>
<h1> Login Screen </h1>
<div>
  <form name="f" th:action="@{/login}" method="POST">
   <fieldset>
   <legend> Please Login</legend>
   
   <div th:if="${param.error}" class="alert alert-error">
    Invalid username and Password..
   </div>
   
   <div th:if="${param.logout}" class="alert alert-success">
    You have been logged out..
   </div>
   
   <label for="username"> UserName </label>
   <input type="text" id ="username" name="username"/><br><br>
   <label for="password"> Password </label>
   <input type="password" id ="password" name="password"/>
   <div class="form-actions">
   <button type="submit" class="btn">Log in</button>
   </div>
   </fieldset>
  </form>
</div>


</body>
</html>


3/-
SpringSecurityWithJdbc1Application.java

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringSecurityWithJdbc1Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringSecurityWithJdbc1Application.class, args);
	}
	
HomeResource.java

package com.example.demo;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeResource 
{
	@GetMapping("/")
	public String home()
	{
		return(" <h1> Welcome </h1>");
	}
	
	@GetMapping("/user")
	public String user()
	{
		return(" <h1> Welcome  to user</h1>");
	}
	
	@GetMapping("/admin")
	public String admin()
	{
		return(" <h1> Welcome to admin </h1>");
	}

}	

}

SecurityConfiguration.java

package com.example.demo;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;


@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter
{
	@Autowired
	DataSource dataSource;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.jdbcAuthentication()
		.dataSource(dataSource);
		/*.usersByUsernameQuery("select username,password,enabled "
				+ "from users "
				+ "where username = ?")
		.authoritiesByUsernameQuery("select username,authority " 
				+ "from authorities "
				+ "where username = :");*/
		
		
		
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("ADMIN" , "USER")
		.antMatchers("/").permitAll()
		.and().formLogin();
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}

}

